#!/usr/bin/python3
# -*- coding: utf-8 -*-
# @Software: PythonDemo
# @File: py_18类方法静态方法.py
# @Author: xiaohanzhang
# @Data: 2020/9/25

# ---------------------------------------- 类属性 ----------------------------------------
"""
实例属性属于各个实例所有,互不干扰;
类属性属于类所有,所有实例共享一个属性;
不要对实例属性和类属性使用相同的名字,否则将产生难以发现的错误.

访问类属性方法：
1.类名.类属性
2.对象.类属性（不推荐）
注意:如果使用 对象.类属性 = 值 赋值语句，只会给对象添加一个属性，而不会影响到类属性的值
"""


class Tool(object):
    count = 0

    @classmethod
    def show_tool_count(cls):
        print('有%d个工具' % cls.count)

    def __init__(self, name):
        self.name = name
        Tool.count += 1


tool1 = Tool('斧头')
print('有%d个工具' % Tool.count)
tool2 = Tool('锤子')
print('有%d个工具' % Tool.count)
print("=" * 50)

# ---------------------------------------- 类方法 ----------------------------------------
"""
类方法就是针对类对象定义的方法
在类方法内部可以直接访问类对象或其它类方法
类方法需要用@classmethod修饰器来标识，告诉解释器 这是一个类方法
语法：
@classmethod
def 类方法名(cls)
    pass
注:类方法的第一个参数是cls，类似实例方法的self,在方法内部可以通过cls访问类属性，也可以通过cls调用其它类方法
"""
Tool.show_tool_count()
print("=" * 50)

# ---------------------------------------- 静态方法 ----------------------------------------
"""
使用场景：在开发时，如果需要在类中封装一个方法，这个方法：
不需要 访问实例属性 或 调用实例方法，也不需要 访问类属性 或 调用类方法，
可以将这个方法封装为静态方法

语法：
@staticmethod
def 静态方法名():
    pass

调用方法: 类名.静态方法()
"""


class Dog(object):
    dog_count = 0

    @staticmethod
    def run():
        print("🏃")


Dog.run()

"""
实例方法：方法内部需要访问实例属性，实例方法内部可以使用 类名. 访问类属性
类方法：方法内部只需要访问类属性
静态方法：方法内部不需要访问 实例属性 和 类属性
"""